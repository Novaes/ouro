parameters: 5 3 3 1 3 3
kernel.lua:106:         anon (kernel.lua:106) = terra($A : &double,$B : &double,$C : &double,$lda : int32,$ldb : int32,$ldc : int32,$alpha : double) : {}
kernel.lua:108:             for $mn : int32 = 1,5 - 2,3 do
kernel.lua:109:                 for $nn : int32 = 1,5 - 2,3 do
kernel.lua:64:                      var $a00 : vector(double,1) = vecload($A, ($mn - 1 + 0) * $ldc + $nn - 1 + 0)
                                    var $a01 : vector(double,1) = vecload($A, ($mn - 1 + 0) * $ldc + $nn - 1 + 1)
                                    var $a02 : vector(double,1) = vecload($A, ($mn - 1 + 0) * $ldc + $nn - 1 + 2)
                                    var $a03 : vector(double,1) = vecload($A, ($mn - 1 + 0) * $ldc + $nn - 1 + 3)
                                    var $a04 : vector(double,1) = vecload($A, ($mn - 1 + 0) * $ldc + $nn - 1 + 4)
                                    var $a10 : vector(double,1) = vecload($A, ($mn - 1 + 1) * $ldc + $nn - 1 + 0)
                                    var $a11 : vector(double,1) = vecload($A, ($mn - 1 + 1) * $ldc + $nn - 1 + 1)
                                    var $a12 : vector(double,1) = vecload($A, ($mn - 1 + 1) * $ldc + $nn - 1 + 2)
                                    var $a13 : vector(double,1) = vecload($A, ($mn - 1 + 1) * $ldc + $nn - 1 + 3)
                                    var $a14 : vector(double,1) = vecload($A, ($mn - 1 + 1) * $ldc + $nn - 1 + 4)
                                    var $a20 : vector(double,1) = vecload($A, ($mn - 1 + 2) * $ldc + $nn - 1 + 0)
                                    var $a21 : vector(double,1) = vecload($A, ($mn - 1 + 2) * $ldc + $nn - 1 + 1)
                                    var $a22 : vector(double,1) = vecload($A, ($mn - 1 + 2) * $ldc + $nn - 1 + 2)
                                    var $a23 : vector(double,1) = vecload($A, ($mn - 1 + 2) * $ldc + $nn - 1 + 3)
                                    var $a24 : vector(double,1) = vecload($A, ($mn - 1 + 2) * $ldc + $nn - 1 + 4)
                                    var $a30 : vector(double,1) = vecload($A, ($mn - 1 + 3) * $ldc + $nn - 1 + 0)
                                    var $a31 : vector(double,1) = vecload($A, ($mn - 1 + 3) * $ldc + $nn - 1 + 1)
                                    var $a32 : vector(double,1) = vecload($A, ($mn - 1 + 3) * $ldc + $nn - 1 + 2)
                                    var $a33 : vector(double,1) = vecload($A, ($mn - 1 + 3) * $ldc + $nn - 1 + 3)
                                    var $a34 : vector(double,1) = vecload($A, ($mn - 1 + 3) * $ldc + $nn - 1 + 4)
                                    var $a40 : vector(double,1) = vecload($A, ($mn - 1 + 4) * $ldc + $nn - 1 + 0)
                                    var $a41 : vector(double,1) = vecload($A, ($mn - 1 + 4) * $ldc + $nn - 1 + 1)
                                    var $a42 : vector(double,1) = vecload($A, ($mn - 1 + 4) * $ldc + $nn - 1 + 2)
                                    var $a43 : vector(double,1) = vecload($A, ($mn - 1 + 4) * $ldc + $nn - 1 + 3)
                                    var $a44 : vector(double,1) = vecload($A, ($mn - 1 + 4) * $ldc + $nn - 1 + 4)
kernel.lua:68:                      var $c00 : vector(double,1) = [vector(double,1)]($alpha) * vecload($C, ($mn + 0) * $ldc + $nn + 0)
                                    var $c01 : vector(double,1) = [vector(double,1)]($alpha) * vecload($C, ($mn + 0) * $ldc + $nn + 1)
                                    var $c02 : vector(double,1) = [vector(double,1)]($alpha) * vecload($C, ($mn + 0) * $ldc + $nn + 2)
                                    var $c10 : vector(double,1) = [vector(double,1)]($alpha) * vecload($C, ($mn + 1) * $ldc + $nn + 0)
                                    var $c11 : vector(double,1) = [vector(double,1)]($alpha) * vecload($C, ($mn + 1) * $ldc + $nn + 1)
                                    var $c12 : vector(double,1) = [vector(double,1)]($alpha) * vecload($C, ($mn + 1) * $ldc + $nn + 2)
                                    var $c20 : vector(double,1) = [vector(double,1)]($alpha) * vecload($C, ($mn + 2) * $ldc + $nn + 0)
                                    var $c21 : vector(double,1) = [vector(double,1)]($alpha) * vecload($C, ($mn + 2) * $ldc + $nn + 1)
                                    var $c22 : vector(double,1) = [vector(double,1)]($alpha) * vecload($C, ($mn + 2) * $ldc + $nn + 2)
kernel.lua:83:                      var $b00 : vector(double,1) = vecload($B, 0 * $ldb + 0)
                                    var $b01 : vector(double,1) = vecload($B, 0 * $ldb + 1)
                                    var $b02 : vector(double,1) = vecload($B, 0 * $ldb + 2)
                                    var $b10 : vector(double,1) = vecload($B, 1 * $ldb + 0)
                                    var $b11 : vector(double,1) = vecload($B, 1 * $ldb + 1)
                                    var $b12 : vector(double,1) = vecload($B, 1 * $ldb + 2)
                                    var $b20 : vector(double,1) = vecload($B, 2 * $ldb + 0)
                                    var $b21 : vector(double,1) = vecload($B, 2 * $ldb + 1)
                                    var $b22 : vector(double,1) = vecload($B, 2 * $ldb + 2)
kernel.lua:98:                      $c00 = $c00 + $a00 * $b00
                                    $c00 = $c00 + $a01 * $b01
                                    $c00 = $c00 + $a02 * $b02
                                    $c00 = $c00 + $a10 * $b10
                                    $c00 = $c00 + $a11 * $b11
                                    $c00 = $c00 + $a12 * $b12
                                    $c00 = $c00 + $a20 * $b20
                                    $c00 = $c00 + $a21 * $b21
                                    $c00 = $c00 + $a22 * $b22
                                    $c01 = $c01 + $a01 * $b00
                                    $c01 = $c01 + $a02 * $b01
                                    $c01 = $c01 + $a03 * $b02
                                    $c01 = $c01 + $a11 * $b10
                                    $c01 = $c01 + $a12 * $b11
                                    $c01 = $c01 + $a13 * $b12
                                    $c01 = $c01 + $a21 * $b20
                                    $c01 = $c01 + $a22 * $b21
                                    $c01 = $c01 + $a23 * $b22
                                    $c02 = $c02 + $a02 * $b00
                                    $c02 = $c02 + $a03 * $b01
                                    $c02 = $c02 + $a04 * $b02
                                    $c02 = $c02 + $a12 * $b10
                                    $c02 = $c02 + $a13 * $b11
                                    $c02 = $c02 + $a14 * $b12
                                    $c02 = $c02 + $a22 * $b20
                                    $c02 = $c02 + $a23 * $b21
                                    $c02 = $c02 + $a24 * $b22
                                    $c10 = $c10 + $a10 * $b00
                                    $c10 = $c10 + $a11 * $b01
                                    $c10 = $c10 + $a12 * $b02
                                    $c10 = $c10 + $a20 * $b10
                                    $c10 = $c10 + $a21 * $b11
                                    $c10 = $c10 + $a22 * $b12
                                    $c10 = $c10 + $a30 * $b20
                                    $c10 = $c10 + $a31 * $b21
                                    $c10 = $c10 + $a32 * $b22
                                    $c11 = $c11 + $a11 * $b00
                                    $c11 = $c11 + $a12 * $b01
                                    $c11 = $c11 + $a13 * $b02
                                    $c11 = $c11 + $a21 * $b10
                                    $c11 = $c11 + $a22 * $b11
                                    $c11 = $c11 + $a23 * $b12
                                    $c11 = $c11 + $a31 * $b20
                                    $c11 = $c11 + $a32 * $b21
                                    $c11 = $c11 + $a33 * $b22
                                    $c12 = $c12 + $a12 * $b00
                                    $c12 = $c12 + $a13 * $b01
                                    $c12 = $c12 + $a14 * $b02
                                    $c12 = $c12 + $a22 * $b10
                                    $c12 = $c12 + $a23 * $b11
                                    $c12 = $c12 + $a24 * $b12
                                    $c12 = $c12 + $a32 * $b20
                                    $c12 = $c12 + $a33 * $b21
                                    $c12 = $c12 + $a34 * $b22
                                    $c20 = $c20 + $a20 * $b00
                                    $c20 = $c20 + $a21 * $b01
                                    $c20 = $c20 + $a22 * $b02
                                    $c20 = $c20 + $a30 * $b10
                                    $c20 = $c20 + $a31 * $b11
                                    $c20 = $c20 + $a32 * $b12
                                    $c20 = $c20 + $a40 * $b20
                                    $c20 = $c20 + $a41 * $b21
                                    $c20 = $c20 + $a42 * $b22
                                    $c21 = $c21 + $a21 * $b00
                                    $c21 = $c21 + $a22 * $b01
                                    $c21 = $c21 + $a23 * $b02
                                    $c21 = $c21 + $a31 * $b10
                                    $c21 = $c21 + $a32 * $b11
                                    $c21 = $c21 + $a33 * $b12
                                    $c21 = $c21 + $a41 * $b20
                                    $c21 = $c21 + $a42 * $b21
                                    $c21 = $c21 + $a43 * $b22
                                    $c22 = $c22 + $a22 * $b00
                                    $c22 = $c22 + $a23 * $b01
                                    $c22 = $c22 + $a24 * $b02
                                    $c22 = $c22 + $a32 * $b10
                                    $c22 = $c22 + $a33 * $b11
                                    $c22 = $c22 + $a34 * $b12
                                    $c22 = $c22 + $a42 * $b20
                                    $c22 = $c22 + $a43 * $b21
                                    $c22 = $c22 + $a44 * $b22
kernel.lua:71:                      r0x0bf3eb18 = vecstore($C, ($mn + 0) * $ldc + $nn + 0, $c00)
                                    r0x0bf40bf8 = vecstore($C, ($mn + 0) * $ldc + $nn + 1, $c01)
                                    r0x0bf42d60 = vecstore($C, ($mn + 0) * $ldc + $nn + 2, $c02)
                                    r0x0bf44ed0 = vecstore($C, ($mn + 1) * $ldc + $nn + 0, $c10)
                                    r0x0bf47038 = vecstore($C, ($mn + 1) * $ldc + $nn + 1, $c11)
                                    r0x0bf491c8 = vecstore($C, ($mn + 1) * $ldc + $nn + 2, $c12)
                                    r0x0bf4b330 = vecstore($C, ($mn + 2) * $ldc + $nn + 0, $c20)
                                    r0x0bf4d498 = vecstore($C, ($mn + 2) * $ldc + $nn + 1, $c21)
                                    r0x0bf4f600 = vecstore($C, ($mn + 2) * $ldc + $nn + 2, $c22)
kernel.lua:109:                 end
kernel.lua:108:             end
kernel.lua:106:         end
kernel.lua:179: Errors reported during specialization.
kernel.lua:145: variable 'l1matmul' not found
						l1matmul(A + m*lda + n,
						       ^

stack traceback:
	[C]: in function 'error'
	src/terralib.lua:481: in function 'finishandabortiferrors'
	src/terralib.lua:2152: in function 'specialize'
	src/terralib.lua:975: in function 'newfunctiondefinition'
	src/terralib.lua:1120: in function 'genconvolution'
	kernel.lua:179: in main chunk
