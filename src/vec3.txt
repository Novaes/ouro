convolution.lua:114:    anon (convolution.lua:114) = terra($A : &double,$B : &double,$C : &double,$sda : int32,$lda : int32,$ldb : int32,$ldc : int32,$alpha : double) : {}
convolution.lua:117:        for $mn : int32 = 1,5 - 1,1 do
convolution.lua:121:            for $nn : int32 = 1,5 - 1,1 * 3 do
convolution.lua:72:                 var $c00 : vector(double,3) = [vector(double,3)]($alpha) * vecload($C, (0 + 1) * $ldc + (0 + 1) * 3)
convolution.lua:87:                 var $b00 : vector(double,3) = vecload($B, 0 * $ldb + 0 * 3)
                                    var $b01 : vector(double,3) = vecload($B, 0 * $ldb + 1 * 3)
                                    var $b02 : vector(double,3) = vecload($B, 0 * $ldb + 2 * 3)
                                    var $b10 : vector(double,3) = vecload($B, 1 * $ldb + 0 * 3)
                                    var $b11 : vector(double,3) = vecload($B, 1 * $ldb + 1 * 3)
                                    var $b12 : vector(double,3) = vecload($B, 1 * $ldb + 2 * 3)
                                    var $b20 : vector(double,3) = vecload($B, 2 * $ldb + 0 * 3)
                                    var $b21 : vector(double,3) = vecload($B, 2 * $ldb + 1 * 3)
                                    var $b22 : vector(double,3) = vecload($B, 2 * $ldb + 2 * 3)
convolution.lua:124:                r0x0786a5d8 = llvm.prefetch([&opaque]($A + $sda * $lda), 0, 3, 1)
convolution.lua:68:                 var $a00 : vector(double,3) = vecload($A, 0 * $ldc + 0 * 3)
                                    var $a01 : vector(double,3) = vecload($A, 0 * $ldc + 1 * 3)
                                    var $a02 : vector(double,3) = vecload($A, 0 * $ldc + 2 * 3)
                                    var $a10 : vector(double,3) = vecload($A, 1 * $ldc + 0 * 3)
                                    var $a11 : vector(double,3) = vecload($A, 1 * $ldc + 1 * 3)
                                    var $a12 : vector(double,3) = vecload($A, 1 * $ldc + 2 * 3)
                                    var $a20 : vector(double,3) = vecload($A, 2 * $ldc + 0 * 3)
                                    var $a21 : vector(double,3) = vecload($A, 2 * $ldc + 1 * 3)
                                    var $a22 : vector(double,3) = vecload($A, 2 * $ldc + 2 * 3)
convolution.lua:103:                if $mn + 0 < 5 - 1 and $nn + 0 < 5 - 1 then
convolution.lua:105:                    $c00 = $c00 + $a00 * $b00
convolution.lua:103:                end
                                    if $mn + 0 < 5 - 1 and $nn + 0 < 5 - 1 then
convolution.lua:105:                    $c00 = $c00 + $a01 * $b01
convolution.lua:103:                end
                                    if $mn + 0 < 5 - 1 and $nn + 0 < 5 - 1 then
convolution.lua:105:                    $c00 = $c00 + $a02 * $b02
convolution.lua:103:                end
                                    if $mn + 0 < 5 - 1 and $nn + 0 < 5 - 1 then
convolution.lua:105:                    $c00 = $c00 + $a10 * $b10
convolution.lua:103:                end
                                    if $mn + 0 < 5 - 1 and $nn + 0 < 5 - 1 then
convolution.lua:105:                    $c00 = $c00 + $a11 * $b11
convolution.lua:103:                end
                                    if $mn + 0 < 5 - 1 and $nn + 0 < 5 - 1 then
convolution.lua:105:                    $c00 = $c00 + $a12 * $b12
convolution.lua:103:                end
                                    if $mn + 0 < 5 - 1 and $nn + 0 < 5 - 1 then
convolution.lua:105:                    $c00 = $c00 + $a20 * $b20
convolution.lua:103:                end
                                    if $mn + 0 < 5 - 1 and $nn + 0 < 5 - 1 then
convolution.lua:105:                    $c00 = $c00 + $a21 * $b21
convolution.lua:103:                end
                                    if $mn + 0 < 5 - 1 and $nn + 0 < 5 - 1 then
convolution.lua:105:                    $c00 = $c00 + $a22 * $b22
convolution.lua:103:                end
convolution.lua:75:                 r0x078a1b98 = vecstore($C, (0 + 1) * $ldc + (0 + 1), $c00)
convolution.lua:128:                $A = $A + 1 * 3
convolution.lua:129:                $C = $C + 1 * 3
convolution.lua:121:            end
convolution.lua:131:            if 5 - 2 / (1 * 3) * (1 * 3) + 1 < 5 - 1 then
convolution.lua:132:                var offset : int32 = (5 - 2 / (1 * 3) * (1 * 3) + 1 + 1 * 3) - (5 - 1)
convolution.lua:133:                $A = $A - offset
convolution.lua:134:                $C = $C - offset
convolution.lua:131:            end
convolution.lua:138:            $C = $C + 2
convolution.lua:139:            $A = $A + 2
convolution.lua:141:            $A = ($A + 1 * $ldc) - 5
convolution.lua:142:            $C = ($C + 1 * $ldc) - 5
convolution.lua:117:        end
convolution.lua:114:    end
convolution.lua:230: Errors reported during specialization.
convolution.lua:187: error evaluating lua code: 
         [ blockedloop(N,M,{NB2,NB},
                     ^
lua error was:
convolution.lua:157: Errors reported during specialization.
convolution.lua:159: error evaluating lua code: 
                        [ generatelevel(n+1,i,j,blocksize,blocksize) ]
                                      ^
lua error was:
convolution.lua:157: Errors reported during specialization.
convolution.lua:161: error evaluating lua code: 
                        [ generatelevel(n+1,i,j,blocksize,blocksize) ]
                                      ^
lua error was:
 Errors reported during specialization.
convolution.lua:199: variable 'l1conv0' not found
                        l1conv0(AA,
                              ^

stack traceback:
	[C]: in function 'error'
	src/terralib.lua:481: in function 'finishandabortiferrors'
	src/terralib.lua:2152: in function 'specialize'
	src/terralib.lua:975: in function 'newfunctiondefinition'
	src/terralib.lua:1120: in function 'genconvolution'
	convolution.lua:230: in main chunk
