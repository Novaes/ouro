gemm-orig.t:83:         anon (gemm-orig.t:83) = terra($A : &double,$B : &double,$C : &double,$lda : int64,$ldb : int64,$ldc : int64) : {}
gemm-orig.t:84:             for $mn : int32 = 0,16,1 do
gemm-orig.t:85:                 for $nn : int32 = 0,16,1 * 1 do
gemm-orig.t:53:                     var $caddr00 : &double = $C + [int64](0) * $ldc + 0 * 1
gemm-orig.t:54:                     var $c00 : vector(double,1) = [vector(double,1)]([double](0)) *
gemm-orig.t:18:                                                                                     attrload(
gemm-orig.t:54:                                                                                              [&vector(double,1)]($caddr00), { nontemporal = false, align = native, isvolatile = false })
gemm-orig.t:87:                     for $k : int32 = 0,16 do
gemm-orig.t:88:                         r0x00694fa0 = llvm.prefetch([&opaque]($B + [int64](4) * $ldb), 0, 3, 1)
gemm-orig.t:67:                         var $b0 : vector(double,1) = 
gemm-orig.t:18:                                                      attrload(
gemm-orig.t:67:                                                               [&vector(double,1)](&$B[0 * 1]), { nontemporal = false, align = native, isvolatile = false })
gemm-orig.t:72:                         var $a0 : vector(double,1) = [vector(double,1)]($A[[int64](0) * $lda])
gemm-orig.t:78:                         $c00 = $c00 + $a0 * $b0
gemm-orig.t:90:                         $B = $B + $ldb
gemm-orig.t:91:                         $A = $A + 1
gemm-orig.t:87:                     end
gemm-orig.t:21:                     attrstore(
gemm-orig.t:58:                               [&vector(double,1)]($caddr00), $c00, { nontemporal = false, align = native, isvolatile = false })
gemm-orig.t:94:                     $A = $A - 16
gemm-orig.t:95:                     $B = $B - ($ldb * [int64](16)) + 1 * 1
gemm-orig.t:96:                     $C = $C + 1 * 1
gemm-orig.t:85:                 end
gemm-orig.t:98:                 $C = ($C + [int64](1) * $ldb) - 16
gemm-orig.t:99:                 $B = $B - 16
gemm-orig.t:100:                $A = $A + $lda * [int64](1)
gemm-orig.t:84:             end
gemm-orig.t:83:         end
16	1	1	1
./lib/matrixtestharness.t:62: interrupted!
stack traceback:
	gemm-orig.t:194: in function 'fn'
	./lib/matrixtestharness.t:62: in function 'fn'
	./lib/matrixtestharness.t:20: in function 'CalcTime'
	./lib/matrixtestharness.t:64: in function 'timefunctions'
	gemm-orig.t:192: in main chunk
