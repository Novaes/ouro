gemm.lua:141:           anon (gemm.lua:141) = terra(gettime : &{} -> double,M : int32,N : int32,K : int32,alpha : double,A : &double,lda : int32,B : &double,ldb : int32,beta : double,C : &double,ldc : int32) : {}
gemm.lua:121:               for i : int32 = 0,min(0 + N, N),80 do
gemm.lua:122:                   for j : int32 = 0,min(0 + M, M),80 do
gemm.lua:123:                       for k : int32 = 0,min(0 + K, K),80 do
gemm.lua:121:                           for i$79 : int32 = i,min(i + 80, N),16 do
gemm.lua:122:                               for j$80 : int32 = j,min(j + 80, M),16 do
gemm.lua:123:                                   for k$81 : int32 = k,min(k + 80, K),16 do
gemm.lua:144:                                       var MM : int32, var NN : int32, var KK : int32 = min(M - i$79, 16), min(N - j$80, 16), min(K - k$81, 16)
gemm.lua:145:                                       var isboundary : bool = MM < 16 or NN < 16 or KK < 16
gemm.lua:146:                                       var AA : &double, var BB : &double, var CC : &double = A + (i$79 * lda + k$81), B + (k$81 * ldb + j$80), C + (i$79 * ldc + j$80)
gemm.lua:147:                                       if k$81 == 0 then
gemm.lua:148:                                           if isboundary then
gemm.lua:150:                                               r0x0e072370 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:153:                                           else
                                                            r0x0dfa6860 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:148:                                           end
gemm.lua:156:                                       else
                                                        if isboundary then
gemm.lua:159:                                               r0x0e063ac0 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:163:                                           else
                                                            r0x0dfd2220 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:156:                                           end
gemm.lua:147:                                       end
gemm.lua:123:                                   end
gemm.lua:122:                               end
gemm.lua:121:                           end
gemm.lua:123:                       end
gemm.lua:122:                   end
gemm.lua:121:               end
gemm.lua:141:           end
gemm.lua:141:           anon (gemm.lua:141) = terra(gettime : &{} -> double,M : int32,N : int32,K : int32,alpha : double,A : &double,lda : int32,B : &double,ldb : int32,beta : double,C : &double,ldc : int32) : {}
gemm.lua:121:               for i : int32 = 0,min(0 + N, N),80 do
gemm.lua:122:                   for j : int32 = 0,min(0 + M, M),80 do
gemm.lua:123:                       for k : int32 = 0,min(0 + K, K),80 do
gemm.lua:121:                           for i$166 : int32 = i,min(i + 80, N),16 do
gemm.lua:122:                               for j$167 : int32 = j,min(j + 80, M),16 do
gemm.lua:123:                                   for k$168 : int32 = k,min(k + 80, K),16 do
gemm.lua:144:                                       var MM : int32, var NN : int32, var KK : int32 = min(M - i$166, 16), min(N - j$167, 16), min(K - k$168, 16)
gemm.lua:145:                                       var isboundary : bool = MM < 16 or NN < 16 or KK < 16
gemm.lua:146:                                       var AA : &double, var BB : &double, var CC : &double = A + (i$166 * lda + k$168), B + (k$168 * ldb + j$167), C + (i$166 * ldc + j$167)
gemm.lua:147:                                       if k$168 == 0 then
gemm.lua:148:                                           if isboundary then
gemm.lua:150:                                               r0x0e12a528 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:153:                                           else
                                                            r0x0e14d988 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:148:                                           end
gemm.lua:156:                                       else
                                                        if isboundary then
gemm.lua:159:                                               r0x0e173980 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:163:                                           else
                                                            r0x0e196c88 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:156:                                           end
gemm.lua:147:                                       end
gemm.lua:123:                                   end
gemm.lua:122:                               end
gemm.lua:121:                           end
gemm.lua:123:                       end
gemm.lua:122:                   end
gemm.lua:121:               end
gemm.lua:141:           end
gemm.lua:141:           anon (gemm.lua:141) = terra(gettime : &{} -> double,M : int32,N : int32,K : int32,alpha : double,A : &double,lda : int32,B : &double,ldb : int32,beta : double,C : &double,ldc : int32) : {}
gemm.lua:121:               for i : int32 = 0,min(0 + N, N),80 do
gemm.lua:122:                   for j : int32 = 0,min(0 + M, M),80 do
gemm.lua:123:                       for k : int32 = 0,min(0 + K, K),80 do
gemm.lua:121:                           for i$253 : int32 = i,min(i + 80, N),16 do
gemm.lua:122:                               for j$254 : int32 = j,min(j + 80, M),16 do
gemm.lua:123:                                   for k$255 : int32 = k,min(k + 80, K),16 do
gemm.lua:144:                                       var MM : int32, var NN : int32, var KK : int32 = min(M - i$253, 16), min(N - j$254, 16), min(K - k$255, 16)
gemm.lua:145:                                       var isboundary : bool = MM < 16 or NN < 16 or KK < 16
gemm.lua:146:                                       var AA : &double, var BB : &double, var CC : &double = A + (i$253 * lda + k$255), B + (k$255 * ldb + j$254), C + (i$253 * ldc + j$254)
gemm.lua:147:                                       if k$255 == 0 then
gemm.lua:148:                                           if isboundary then
gemm.lua:150:                                               r0x0e1aed10 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:153:                                           else
                                                            r0x0e0e0928 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:148:                                           end
gemm.lua:156:                                       else
                                                        if isboundary then
gemm.lua:159:                                               r0x0e1f3218 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:163:                                           else
                                                            r0x0e20d210 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:156:                                           end
gemm.lua:147:                                       end
gemm.lua:123:                                   end
gemm.lua:122:                               end
gemm.lua:121:                           end
gemm.lua:123:                       end
gemm.lua:122:                   end
gemm.lua:121:               end
gemm.lua:141:           end
gemm.lua:141:           anon (gemm.lua:141) = terra(gettime : &{} -> double,M : int32,N : int32,K : int32,alpha : double,A : &double,lda : int32,B : &double,ldb : int32,beta : double,C : &double,ldc : int32) : {}
gemm.lua:121:               for i : int32 = 0,min(0 + N, N),80 do
gemm.lua:122:                   for j : int32 = 0,min(0 + M, M),80 do
gemm.lua:123:                       for k : int32 = 0,min(0 + K, K),80 do
gemm.lua:121:                           for i$340 : int32 = i,min(i + 80, N),16 do
gemm.lua:122:                               for j$341 : int32 = j,min(j + 80, M),16 do
gemm.lua:123:                                   for k$342 : int32 = k,min(k + 80, K),16 do
gemm.lua:144:                                       var MM : int32, var NN : int32, var KK : int32 = min(M - i$340, 16), min(N - j$341, 16), min(K - k$342, 16)
gemm.lua:145:                                       var isboundary : bool = MM < 16 or NN < 16 or KK < 16
gemm.lua:146:                                       var AA : &double, var BB : &double, var CC : &double = A + (i$340 * lda + k$342), B + (k$342 * ldb + j$341), C + (i$340 * ldc + j$341)
gemm.lua:147:                                       if k$342 == 0 then
gemm.lua:148:                                           if isboundary then
gemm.lua:150:                                               r0x0e1cedc8 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:153:                                           else
                                                            r0x0e010480 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:148:                                           end
gemm.lua:156:                                       else
                                                        if isboundary then
gemm.lua:159:                                               r0x0e22f0b0 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:163:                                           else
                                                            r0x0e252498 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:156:                                           end
gemm.lua:147:                                       end
gemm.lua:123:                                   end
gemm.lua:122:                               end
gemm.lua:121:                           end
gemm.lua:123:                       end
gemm.lua:122:                   end
gemm.lua:121:               end
gemm.lua:141:           end
gemm.lua:141:           anon (gemm.lua:141) = terra(gettime : &{} -> double,M : int32,N : int32,K : int32,alpha : double,A : &double,lda : int32,B : &double,ldb : int32,beta : double,C : &double,ldc : int32) : {}
gemm.lua:121:               for i : int32 = 0,min(0 + N, N),80 do
gemm.lua:122:                   for j : int32 = 0,min(0 + M, M),80 do
gemm.lua:123:                       for k : int32 = 0,min(0 + K, K),80 do
gemm.lua:121:                           for i$427 : int32 = i,min(i + 80, N),16 do
gemm.lua:122:                               for j$428 : int32 = j,min(j + 80, M),16 do
gemm.lua:123:                                   for k$429 : int32 = k,min(k + 80, K),16 do
gemm.lua:144:                                       var MM : int32, var NN : int32, var KK : int32 = min(M - i$427, 16), min(N - j$428, 16), min(K - k$429, 16)
gemm.lua:145:                                       var isboundary : bool = MM < 16 or NN < 16 or KK < 16
gemm.lua:146:                                       var AA : &double, var BB : &double, var CC : &double = A + (i$427 * lda + k$429), B + (k$429 * ldb + j$428), C + (i$427 * ldc + j$428)
gemm.lua:147:                                       if k$429 == 0 then
gemm.lua:148:                                           if isboundary then
gemm.lua:150:                                               r0x0e22ce58 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:153:                                           else
                                                            r0x0e082aa0 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:148:                                           end
gemm.lua:156:                                       else
                                                        if isboundary then
gemm.lua:159:                                               r0x0e110420 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:163:                                           else
                                                            r0x0e0ccf28 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:156:                                           end
gemm.lua:147:                                       end
gemm.lua:123:                                   end
gemm.lua:122:                               end
gemm.lua:121:                           end
gemm.lua:123:                       end
gemm.lua:122:                   end
gemm.lua:121:               end
gemm.lua:141:           end
gemm.lua:141:           anon (gemm.lua:141) = terra(gettime : &{} -> double,M : int32,N : int32,K : int32,alpha : double,A : &double,lda : int32,B : &double,ldb : int32,beta : double,C : &double,ldc : int32) : {}
gemm.lua:121:               for i : int32 = 0,min(0 + N, N),80 do
gemm.lua:122:                   for j : int32 = 0,min(0 + M, M),80 do
gemm.lua:123:                       for k : int32 = 0,min(0 + K, K),80 do
gemm.lua:121:                           for i$520 : int32 = i,min(i + 80, N),16 do
gemm.lua:122:                               for j$521 : int32 = j,min(j + 80, M),16 do
gemm.lua:123:                                   for k$522 : int32 = k,min(k + 80, K),16 do
gemm.lua:144:                                       var MM : int32, var NN : int32, var KK : int32 = min(M - i$520, 16), min(N - j$521, 16), min(K - k$522, 16)
gemm.lua:145:                                       var isboundary : bool = MM < 16 or NN < 16 or KK < 16
gemm.lua:146:                                       var AA : &double, var BB : &double, var CC : &double = A + (i$520 * lda + k$522), B + (k$522 * ldb + j$521), C + (i$520 * ldc + j$521)
gemm.lua:147:                                       if k$522 == 0 then
gemm.lua:148:                                           if isboundary then
gemm.lua:150:                                               r0x0e29f758 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:153:                                           else
                                                            r0x0e08ca40 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:148:                                           end
gemm.lua:156:                                       else
                                                        if isboundary then
gemm.lua:159:                                               r0x0e12c268 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:163:                                           else
                                                            r0x0e01acb0 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:156:                                           end
gemm.lua:147:                                       end
gemm.lua:123:                                   end
gemm.lua:122:                               end
gemm.lua:121:                           end
gemm.lua:123:                       end
gemm.lua:122:                   end
gemm.lua:121:               end
gemm.lua:141:           end
gemm.lua:141:           anon (gemm.lua:141) = terra(gettime : &{} -> double,M : int32,N : int32,K : int32,alpha : double,A : &double,lda : int32,B : &double,ldb : int32,beta : double,C : &double,ldc : int32) : {}
gemm.lua:121:               for i : int32 = 0,min(0 + N, N),80 do
gemm.lua:122:                   for j : int32 = 0,min(0 + M, M),80 do
gemm.lua:123:                       for k : int32 = 0,min(0 + K, K),80 do
gemm.lua:121:                           for i$613 : int32 = i,min(i + 80, N),16 do
gemm.lua:122:                               for j$614 : int32 = j,min(j + 80, M),16 do
gemm.lua:123:                                   for k$615 : int32 = k,min(k + 80, K),16 do
gemm.lua:144:                                       var MM : int32, var NN : int32, var KK : int32 = min(M - i$613, 16), min(N - j$614, 16), min(K - k$615, 16)
gemm.lua:145:                                       var isboundary : bool = MM < 16 or NN < 16 or KK < 16
gemm.lua:146:                                       var AA : &double, var BB : &double, var CC : &double = A + (i$613 * lda + k$615), B + (k$615 * ldb + j$614), C + (i$613 * ldc + j$614)
gemm.lua:147:                                       if k$615 == 0 then
gemm.lua:148:                                           if isboundary then
gemm.lua:150:                                               r0x0e292bf8 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:153:                                           else
                                                            r0x0e1ac1a8 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:148:                                           end
gemm.lua:156:                                       else
                                                        if isboundary then
gemm.lua:159:                                               r0x0e16bdd8 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:163:                                           else
                                                            r0x0e2566f8 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:156:                                           end
gemm.lua:147:                                       end
gemm.lua:123:                                   end
gemm.lua:122:                               end
gemm.lua:121:                           end
gemm.lua:123:                       end
gemm.lua:122:                   end
gemm.lua:121:               end
gemm.lua:141:           end
gemm.lua:141:           anon (gemm.lua:141) = terra(gettime : &{} -> double,M : int32,N : int32,K : int32,alpha : double,A : &double,lda : int32,B : &double,ldb : int32,beta : double,C : &double,ldc : int32) : {}
gemm.lua:121:               for i : int32 = 0,min(0 + N, N),80 do
gemm.lua:122:                   for j : int32 = 0,min(0 + M, M),80 do
gemm.lua:123:                       for k : int32 = 0,min(0 + K, K),80 do
gemm.lua:121:                           for i$706 : int32 = i,min(i + 80, N),16 do
gemm.lua:122:                               for j$707 : int32 = j,min(j + 80, M),16 do
gemm.lua:123:                                   for k$708 : int32 = k,min(k + 80, K),16 do
gemm.lua:144:                                       var MM : int32, var NN : int32, var KK : int32 = min(M - i$706, 16), min(N - j$707, 16), min(K - k$708, 16)
gemm.lua:145:                                       var isboundary : bool = MM < 16 or NN < 16 or KK < 16
gemm.lua:146:                                       var AA : &double, var BB : &double, var CC : &double = A + (i$706 * lda + k$708), B + (k$708 * ldb + j$707), C + (i$706 * ldc + j$707)
gemm.lua:147:                                       if k$708 == 0 then
gemm.lua:148:                                           if isboundary then
gemm.lua:150:                                               r0x0e11e1a8 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:153:                                           else
                                                            r0x0e13c600 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:148:                                           end
gemm.lua:156:                                       else
                                                        if isboundary then
gemm.lua:159:                                               r0x0e0fe9f0 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:163:                                           else
                                                            r0x0e0ab800 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:156:                                           end
gemm.lua:147:                                       end
gemm.lua:123:                                   end
gemm.lua:122:                               end
gemm.lua:121:                           end
gemm.lua:123:                       end
gemm.lua:122:                   end
gemm.lua:121:               end
gemm.lua:141:           end
gemm.lua:141:           anon (gemm.lua:141) = terra(gettime : &{} -> double,M : int32,N : int32,K : int32,alpha : double,A : &double,lda : int32,B : &double,ldb : int32,beta : double,C : &double,ldc : int32) : {}
gemm.lua:121:               for i : int32 = 0,min(0 + N, N),80 do
gemm.lua:122:                   for j : int32 = 0,min(0 + M, M),80 do
gemm.lua:123:                       for k : int32 = 0,min(0 + K, K),80 do
gemm.lua:121:                           for i$799 : int32 = i,min(i + 80, N),16 do
gemm.lua:122:                               for j$800 : int32 = j,min(j + 80, M),16 do
gemm.lua:123:                                   for k$801 : int32 = k,min(k + 80, K),16 do
gemm.lua:144:                                       var MM : int32, var NN : int32, var KK : int32 = min(M - i$799, 16), min(N - j$800, 16), min(K - k$801, 16)
gemm.lua:145:                                       var isboundary : bool = MM < 16 or NN < 16 or KK < 16
gemm.lua:146:                                       var AA : &double, var BB : &double, var CC : &double = A + (i$799 * lda + k$801), B + (k$801 * ldb + j$800), C + (i$799 * ldc + j$800)
gemm.lua:147:                                       if k$801 == 0 then
gemm.lua:148:                                           if isboundary then
gemm.lua:150:                                               r0x0e115da8 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:153:                                           else
                                                            r0x0e28e8a0 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:148:                                           end
gemm.lua:156:                                       else
                                                        if isboundary then
gemm.lua:159:                                               r0x0dfd5088 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc), [int64](MM), [int64](NN), [int64](KK))
gemm.lua:163:                                           else
                                                            r0x0e24c3f0 = anon (gemm.lua:85)(AA, BB, CC, [int64](lda), [int64](ldb), [int64](ldc))
gemm.lua:156:                                           end
gemm.lua:147:                                       end
gemm.lua:123:                                   end
gemm.lua:122:                               end
gemm.lua:121:                           end
gemm.lua:123:                       end
gemm.lua:122:                   end
gemm.lua:121:               end
gemm.lua:141:           end
gemm.lua:187: attempt to index a boolean value
stack traceback:
	gemm.lua:187: in main chunk
